
import { mdx } from "@mdx-js/react";
export function meta() { return {"title":"Browser Entry Module | Remix"}}
/* @jsxRuntime classic */
/* @jsx mdx */
import { Link } from "react-router-dom";


const layoutProps = {
  
};
const MDXLayout = "wrapper"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType="MDXLayout">

    <nav {...{
      "className": "toc"
    }}><div parentName="nav" {...{
        "className": "heading"
      }}>{`On this page`}</div><ol parentName="nav" {...{
        "className": "toc-level toc-level-1"
      }}></ol></nav><article {...{
      "className": "prose dark:prose-dark xl:prose-lg p-8 md:max-w-4xl"
    }}><h1 parentName="article" {...{
        "id": "browser-entry-module"
      }}>{`Browser Entry Module`}</h1>
      <p parentName="article">{`Remix uses `}<inlineCode parentName="p">{`app/entry.client.js`}</inlineCode>{` as the entry point for the browser bundle. This module gives you full control over the "hydrate" step after JavaScript loads into the document.`}</p>
      <p parentName="article">{`Typically this module uses `}<inlineCode parentName="p">{`ReactDOM.hydrate`}</inlineCode>{` to re-hydrate the markup that was already generated on the server in your `}<Link to="../server-entry-module" mdxType="Link">{`server entry module`}</Link>{`.`}</p>
      <p parentName="article">{`An example of how this is done can be found in `}<a parentName="p" {...{
          "href": "https://github.com/remix-run/starter-express/blob/master/app/entry.client.tsx"
        }}>{`the Express starter repo`}</a>{`.`}</p></article>
    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;