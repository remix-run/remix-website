
import { mdx } from "@mdx-js/react";
export function meta() { return {"title":"Installing Remix | Remix Tutorial","description":"Get started with Remix, first step is installing."}}
/* @jsxRuntime classic */
/* @jsx mdx */
import { Link } from "react-router-dom";


const layoutProps = {
  
};
const MDXLayout = "wrapper"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType="MDXLayout">

    <nav {...{
      "className": "toc"
    }}><div parentName="nav" {...{
        "className": "heading"
      }}>{`On this page`}</div><ol parentName="nav" {...{
        "className": "toc-level toc-level-1"
      }}><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#cloning-a-starter-project"
          }}>{`Cloning a starter project`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#edit-npmrc"
          }}>{`Edit .npmrc`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#start-the-development-server"
          }}>{`Start the development server`}</a></li></ol></nav><article {...{
      "className": "prose dark:prose-dark xl:prose-lg p-8 md:max-w-4xl"
    }}><h1 parentName="article" {...{
        "id": "installing-remix"
      }}>{`Installing Remix`}</h1>
      <p parentName="article">{`Welcome to Remix! Thank you so much for supporting us. We'll get you up and running in a few minutes.`}</p>
      <p parentName="article">{`If you run into any trouble, ask for help through one of the support channels.`}</p>
      <h2 parentName="article" {...{
        "id": "cloning-a-starter-project"
      }}>{`Cloning a starter project`}</h2>
      <p parentName="article">{`Remix let's you deploy anywhere and is not a full web server. In production you only deploy two things:`}</p>
      <ul parentName="article">
        <li parentName="ul">{`An http request handler on your platform of choice`}</li>
        <li parentName="ul">{`Static assets`}</li>
      </ul>
      <p parentName="article">{`We have three starter repositories right now and plan to add more, so take your pick:`}</p>
      <ul parentName="article">
        <li parentName="ul"><a parentName="li" {...{
            "href": "https://github.com/remix-run/starter-express"
          }}>{`Express`}</a></li>
        <li parentName="ul"><a parentName="li" {...{
            "href": "https://github.com/remix-run/starter-vercel"
          }}>{`Vercel`}</a></li>
        <li parentName="ul">{`AWS API Gateway via `}<a parentName="li" {...{
            "href": "https://github.com/remix-run/starter-vercel"
          }}>{`Architect`}</a></li>
      </ul>
      <p parentName="article">{`For this tutorial we'll be using our express starter repo since it doesn't require an account anywhere. Note that Remix does not depend on express, express is simply our server that we'll attach the Remix request handler to. If you picked another starter, make sure you check out the README to get it running.`}</p>
      <pre parentName="article" {...{
        "className": "language-bash"
      }}><code parentName="pre" {...{
          "className": "language-bash"
        }}><span parentName="code" {...{
            "className": "token comment"
          }}>{`# depending on how you're machine is set up with github`}</span>{`

`}<span parentName="code" {...{
            "className": "token comment"
          }}>{`# can do this:`}</span>{`
$ `}<span parentName="code" {...{
            "className": "token function"
          }}>{`git`}</span>{` clone git@github.com:remix-run/starter-express.git my-remix-app

`}<span parentName="code" {...{
            "className": "token comment"
          }}>{`# or this`}</span>{`
$ `}<span parentName="code" {...{
            "className": "token function"
          }}>{`git`}</span>{` clone https://github.com/remix-run/starter-express.git my-remix-app

`}<span parentName="code" {...{
            "className": "token builtin class-name"
          }}>{`cd`}</span>{` my-remix-app
`}</code></pre>
      <p parentName="article"><strong parentName="p">{`TypeScript Note`}</strong></p>
      <p parentName="article">{`Our starters use TypeScript, we encourage you to learn it if you haven't tried it yet. We keep the types very basic in this tutorial. If you really don't want to use TypeScript, there is `}<a parentName="p" {...{
          "href": "https://github.com/remix-run/starter-express/tree/no-typescript"
        }}>{`a `}<inlineCode parentName="a">{`no-typescript`}</inlineCode>{` branch`}</a>{` you can use.`}</p>
      <h2 parentName="article" {...{
        "id": "edit-npmrc"
      }}>{`Edit `}<inlineCode parentName="h2">{`.npmrc`}</inlineCode></h2>
      <p parentName="article">{`In order for npm (or yarn) to be able to install Remix, you need to add your license key to the `}<inlineCode parentName="p">{`.npmrc`}</inlineCode>{` configuration. You'll find it on `}<Link to="/dashboard" mdxType="Link">{`the dashboard`}</Link>{`.`}</p>
      <p parentName="article">{`It should look something like this:`}</p>
      <pre parentName="article"><code parentName="pre" {...{}}>{`//npm.remix.run/:_authToken=<your token>
@remix-run:registry=https://npm.remix.run
`}</code></pre>
      <p parentName="article">{`The first line allows npm to authenticate you with our npm registry when installing packages and the second line tells npm to use our registry whenever you are installing something with the npm scope `}<inlineCode parentName="p">{`@remix-run`}</inlineCode>{`.`}</p>
      <p parentName="article">{`You can also add those lines to your home directory `}<inlineCode parentName="p">{`~/.npmrc`}</inlineCode>{`, then all of your Remix projects don't need their own `}<inlineCode parentName="p">{`.npmrc`}</inlineCode>{` file.`}</p>
      <h3 parentName="article" {...{
        "id": "environment-variable-for-npm-tokens"
      }}>{`Environment variable for NPM tokens`}</h3>
      <p parentName="article">{`A lot our customers like to use an environment variable for their token. You can export it from your bash profile and/or set it up on your CI.`}</p>
      <pre parentName="article"><code parentName="pre" {...{}}>{`//npm.remix.run/:_authToken=\${REMIX_REGISTRY_TOKEN}
@remix-run:registry=https://npm.remix.run
`}</code></pre>
      <p parentName="article">{`This way you can share a repo with other people who have a remix license without commiting it to the source code.`}</p>
      <h2 parentName="article" {...{
        "id": "start-the-development-server"
      }}>{`Start the development server`}</h2>
      <pre parentName="article" {...{
        "className": "language-bash"
      }}><code parentName="pre" {...{
          "className": "language-bash"
        }}>{`$ `}<span parentName="code" {...{
            "className": "token function"
          }}>{`npm`}</span>{` `}<span parentName="code" {...{
            "className": "token function"
          }}>{`install`}</span>{`
$ `}<span parentName="code" {...{
            "className": "token function"
          }}>{`npm`}</span>{` run dev
`}</code></pre>
      <p parentName="article">{`Now open up your browser to `}<a parentName="p" {...{
          "href": "http://localhost:3000"
        }}>{`http://localhost:3000`}</a>{` and you should see the hello world page!`}</p>
      <p parentName="article"><strong parentName="p">{`Note`}</strong>{`: We're using pm2-dev in package.json to run two processes in the same window with `}<inlineCode parentName="p">{`npm run dev`}</inlineCode>{`. Remix does not require two processes in production, just development. If you look in pm2.config we're calling `}<inlineCode parentName="p">{`remix run`}</inlineCode>{`. It's just a file watcher to rebuild the Remix assets. In production those files will be built and deployed to your static asset server or CDN. The other process is the app server which Remix doesn't own. It could be express, or vercel, or arc, etc.`}</p>
      <p parentName="article">{`Alright, let's make some routes!`}</p>
      <div className="next-prev-links">
  <Link className="next" to="../defining-routes" mdxType="Link">
    Next up: Defining Routes
  </Link>
      </div></article>
    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;