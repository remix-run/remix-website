
import { mdx } from "@mdx-js/react";
export function meta() { return {"title":"Conventions | Remix Run"}}
/* @jsxRuntime classic */
/* @jsx mdx */


const makeShortcode = name => function MDXDefaultShortcode(props) {
      console.warn("Component " + name + " was not imported, exported, or provided by MDXProvider as global scope")
      return <div {...props}/>
    };
const Link = makeShortcode("Link");
const layoutProps = {
  
};
const MDXLayout = "wrapper"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType="MDXLayout">
    <nav {...{
      "className": "toc"
    }}><div parentName="nav" {...{
        "className": "heading"
      }}>{`On this page`}</div><ol parentName="nav" {...{
        "className": "toc-level toc-level-1"
      }}><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#remixconfigjs"
          }}>{`remix.config.js`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#appentryservertsx"
          }}>{`app/entry.server.tsx`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#appentryclienttsx"
          }}>{`app/entry.client.tsx`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#approottsx"
          }}>{`app/root.tsx`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#approutesjsjsxtstsxmdmdxcjs"
          }}>{`app/routes/*/.{js,jsx,ts,tsx,md,mdx,cjs}`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#dots-in-route-filesnames"
          }}>{`Dots in Route Filesnames`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#route-params-with-param-in-files-and-folders"
          }}>{`Route params with $param in files and folders.`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#routes404tsx"
          }}>{`routes/404.tsx`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#importing-images-with-img"
          }}>{`Importing images with img:`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#importing-css-with-css"
          }}>{`Importing css with css:`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#importing-any-asset-with-url"
          }}>{`Importing any asset with url:`}</a></li></ol></nav><article {...{
      "className": "prose dark:prose-dark xl:prose-lg p-8 md:max-w-4xl"
    }}><h1 parentName="article" {...{
        "id": "conventions"
      }}>{`Conventions`}</h1>
      <p parentName="article">{`There are a few conventions in Remix to be aware of.`}</p>
      <h2 parentName="article" {...{
        "id": "remixconfigjs"
      }}>{`remix.config.js`}</h2>
      <p parentName="article">{`This file must be named `}<inlineCode parentName="p">{`remix.config.js`}</inlineCode>{` for Remix to find it when it starts up.`}</p>
      <h2 parentName="article" {...{
        "id": "appentryservertsx"
      }}>{`app/entry.server.tsx`}</h2>
      <p parentName="article">{`This is your entry into the server rendering piece of Remix. You must leave the file name as is.`}</p>
      <h2 parentName="article" {...{
        "id": "appentryclienttsx"
      }}>{`app/entry.client.tsx`}</h2>
      <p parentName="article">{`This is your entry into the browser rendering/hydration piece of Remix. You must leave the file name as is.`}</p>
      <h2 parentName="article" {...{
        "id": "approottsx"
      }}>{`app/root.tsx`}</h2>
      <p parentName="article">{`This is your roto layout, or "root route" (very sorry for those of you who pronounce those words the same way!). It works just like all other routes: you can export a `}<inlineCode parentName="p">{`loader`}</inlineCode>{`, `}<inlineCode parentName="p">{`action`}</inlineCode>{`, etc.`}</p>
      <h2 parentName="article" {...{
        "id": "approutesjsjsxtstsxmdmdxcjs"
      }}>{`app/routes/`}{`*`}<em parentName="h2">{`/`}</em>{`.{js,jsx,ts,tsx,md,mdx,cjs}`}</h2>
      <p parentName="article">{`Any files in the app/routes directory will become routes in your application. Remix supports all of those extensions.`}</p>
      <p parentName="article">{`The filename minus extension becomes the "route id". So a file at `}<inlineCode parentName="p">{`routes/foo/$bar.tsx`}</inlineCode>{` has the route id of `}<inlineCode parentName="p">{`routes/foo/$bar`}</inlineCode>{`. These route ids will show up in future APIs for preloading resources.`}</p>
      <h2 parentName="article" {...{
        "id": "dots-in-route-filesnames"
      }}>{`Dots in Route Filesnames`}</h2>
      <p parentName="article">{`Adding a `}<inlineCode parentName="p">{`.`}</inlineCode>{` in a route file will create a nested URL, but not a nested layout. Flat files are flat layouts, nested files are nested layouts. The `}<inlineCode parentName="p">{`.`}</inlineCode>{` allows you to create nested URLs without needing to create a bunch of layouts.`}</p>
      <p parentName="article">{`For example: `}<inlineCode parentName="p">{`routes/some.long.url.tsx`}</inlineCode>{` will create the URL `}<inlineCode parentName="p">{`/some/long/url`}</inlineCode>{`.`}</p>
      <h2 parentName="article" {...{
        "id": "route-params-with-param-in-files-and-folders"
      }}>{`Route params with `}<inlineCode parentName="h2">{`$param`}</inlineCode>{` in files and folders.`}</h2>
      <p parentName="article">{`The dollar sign denotes a dynamic segment of the URL. It will be parsed and passed to your loaders and routes.`}</p>
      <p parentName="article">{`For example: `}<inlineCode parentName="p">{`routes/users/$userId.tsx`}</inlineCode>{` will match the following URLs: `}<inlineCode parentName="p">{`users/123`}</inlineCode>{` and `}<inlineCode parentName="p">{`users/abc`}</inlineCode>{` but not `}<inlineCode parentName="p">{`users/123/abc`}</inlineCode>{` because that has too many segments. See the `}<Link to="../routing" mdxType="Link">{`routing guide`}</Link>{` for more information.`}</p>
      <p parentName="article">{`Some CLIs require you to escape the \\$ when creating files:`}</p>
      <pre parentName="article" {...{
        "className": "language-bash"
      }}><code parentName="pre" {...{
          "className": "language-bash"
        }}><span parentName="code" {...{
            "className": "token function"
          }}>{`touch`}</span>{` routes/`}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`\\`}</span><span parentName="code" {...{
            "className": "token variable"
          }}>{`$params`}</span>{`.tsx
`}</code></pre>
      <p parentName="article">{`Params can be nested routes, just create a folder with the `}<inlineCode parentName="p">{`$`}</inlineCode>{` in it.`}</p>
      <h2 parentName="article" {...{
        "id": "routes404tsx"
      }}>{`routes/404.tsx`}</h2>
      <p parentName="article">{`When a route is not found, we use this file to render a 404 page. We don't like this convention because "/404" should be a valid URL (maybe you're showing the best BBQ in Atlanta!). This is what we've got right now though. This will change.`}</p>
      <h2 parentName="article" {...{
        "id": "importing-images-with-img"
      }}>{`Importing images with `}<inlineCode parentName="h2">{`img:`}</inlineCode></h2>
      <p parentName="article">{`You can import images assets with \`import image from "img:./something.jpg". Check out the `}<a parentName="p" {...{
          "href": "/dashboard/docs/images"
        }}>{`image docs`}</a>{`.`}</p>
      <h2 parentName="article" {...{
        "id": "importing-css-with-css"
      }}>{`Importing css with `}<inlineCode parentName="h2">{`css:`}</inlineCode></h2>
      <p parentName="article">{`You can import css assets with \`import styles from "css:./something.css". Check out the `}<a parentName="p" {...{
          "href": "/dashboard/docs/styling"
        }}>{`styling docs`}</a>{`.`}</p>
      <h2 parentName="article" {...{
        "id": "importing-any-asset-with-url"
      }}>{`Importing any asset with `}<inlineCode parentName="h2">{`url:`}</inlineCode></h2>
      <p parentName="article">{`You can import any assets with \`import assetUrl from "url:./something.mp3". Remix will return the public URL of the file and hash the name of the asset for long term caching.`}</p></article>
    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;