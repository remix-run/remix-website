
import { mdx } from "@mdx-js/react";
export function meta() { return {"title":"Routing | Remix","description":"In Remix, routes are more than just the page. When routes are nested we're able to know a little more about your app than just a single page, and do a lot more because of it."}}
/* @jsxRuntime classic */
/* @jsx mdx */
import { Link } from "react-router-dom";
import { ExampleApp, AnimatedExampleApp } from "../../../components/Invoices";


const layoutProps = {
  
};
const MDXLayout = "wrapper"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType="MDXLayout">

    <nav {...{
      "className": "toc"
    }}><div parentName="nav" {...{
        "className": "heading"
      }}>{`On this page`}</div><ol parentName="nav" {...{
        "className": "toc-level toc-level-1"
      }}><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#what-are-nested-routes"
          }}>{`What are nested routes?`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#defining-nested-routes"
          }}>{`Defining nested routes`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#what-it-means"
          }}>{`What it means`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#index-routes"
          }}>{`Index Routes`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#nested-urls-without-nesting-layouts"
          }}>{`Nested URLs without nesting layouts`}</a></li><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#review"
          }}>{`Review`}</a></li></ol></nav><article {...{
      "className": "prose dark:prose-dark xl:prose-lg p-8 md:max-w-4xl"
    }}><h1 parentName="article" {...{
        "id": "about-nested-routes"
      }}>{`About Nested Routes`}</h1>
      <p parentName="article">{`Let's talk about a concept in Remix that is critical to understand to get the most out of it: Nested Routes.`}</p>
      <p parentName="article">{`We consider nested routes our (not so) secret weapon. This feature of React Router allows Remix to know what you're going to render before you even render it. This lets us fetch data, stylesheets, and modules for the next page, or just the changed part of the page.`}</p>
      <h2 parentName="article" {...{
        "id": "what-are-nested-routes"
      }}>{`What are nested routes?`}</h2>
      <p parentName="article">{`Let's consider a UI to help us out. Imagine you're building invoicing software and the UI looks something like this:`}</p>
      <div style={{
        marginBottom: "-5rem"
      }} />
      <ExampleApp step={0} mdxType="ExampleApp" />
      <p parentName="article">{`Just looking at the boxes it's pretty easy to indentify which pieces of the URL match which parts of the UI. As the user clicks between "Invoices | Projects | Customers", the top nav persists while the screen below changes. Down one level, as the user clicks between invoices the top nav and the invoice nav persist, while the invoice screen swaps out new data. And finally, as the user clicks between "Details | Activity", the details or activity screen will swap out for each other, but the rest of the UI remains unchanged.`}</p>
      <p parentName="article">{`It's a nested layout tree. In Remix, we call every one of these layouts a "route". You might be used to routes that have a 1:1 component-to-url mapping. In Remix, a single URL can match multiple, nested routes.`}</p>
      <h2 parentName="article" {...{
        "id": "defining-nested-routes"
      }}>{`Defining nested routes`}</h2>
      <p parentName="article">{`Nested folders create nested URLs. So if you put something in `}<inlineCode parentName="p">{`routes/invoices/$id.js`}</inlineCode>{` that creates a URL like "/invoices/123". The URL maps identically to the file system. But there's more--nested routes in the file system create nested layouts in the UI. Let's check it out in our example app.`}</p>
      <AnimatedExampleApp mdxType="AnimatedExampleApp" />
      <p parentName="article">{`The root layout of this UI is "root.tsx" and it matches up with the domain name in the URL. This isn't a route yet, this is just the layout, it renders all the time, wrapping the entire UI. It holds the top nav with the links to "Invoices | Projects | Customers".`}</p>
      <p parentName="article">{`The next segment of the URL, and our next layout, is a file in `}<inlineCode parentName="p">{`routes/invoices.js`}</inlineCode>{`. This controls the invoices on the left and wraps the details/activity views. This is our first layout route that matched the URL.`}</p>
      <p parentName="article">{`The nesting gets deeper as we look at the `}<inlineCode parentName="p">{`routes/invoices/$id.js`}</inlineCode>{` component. This is another layout route that renders the Invoice number and links to the "Details | Activity" pages.`}</p>
      <p parentName="article">{`And finally, our final route, `}<inlineCode parentName="p">{`routes/invoices/$id/activity.js`}</inlineCode>{`. Sometime we call these routes that aren't layouts "leaf routes".`}</p>
      <h2 parentName="article" {...{
        "id": "what-it-means"
      }}>{`What it means`}</h2>
      <p parentName="article">{`Because we know all of your routes up front, and we can match them before we render anything--we now know the most important components that are about to render before we render. This gives us fine-grained control over style, data, and module loading that you just can't get without nested routes.`}</p>
      <p parentName="article">{`In fact, when the user clicks on "Details" and "Activity", the only data we fetch is the data for changed portion of the app, rather than for every parent layout above it. It also gives us powerful control over which assets to load and unload with the route module `}<inlineCode parentName="p">{`links`}</inlineCode>{` export.`}</p>
      <p parentName="article">{`For years we've been trying to move all of this kind of thing to the components, but that gets difficult because you don't know what you're going to render until you render it! How can you preload data? How can you know which styles to apply, or which modules to start loading? Nested routes mapping to nested layouts gives us a cheat code. We mostly know what is about to be rendered, so we coupled your async requirements there. When the location changes, we can fetch the modules, styles, and data in parallel before the update (and before the server render, gotta get those data-driven meta tags!).`}</p>
      <h2 parentName="article" {...{
        "id": "index-routes"
      }}>{`Index Routes`}</h2>
      <p parentName="article">{`An Index Route is the route that renders when the layout's path is matched exactly. Again, from our example, our routes folder would look something like this:`}</p>
      <pre parentName="article"><code parentName="pre" {...{}}>{`├── invoices
│   └── $id.js
└── invoices.js
`}</code></pre>
      <p parentName="article">{`So what renders at `}<inlineCode parentName="p">{`https://example.com/invoices`}</inlineCode>{`? At the moment, nothing, it would look like this:`}</p>
      <div style={{
        marginBottom: "-5rem"
      }} />
      <ExampleApp hideInvoice step={0} mdxType="ExampleApp" />
      <p parentName="article">{`If we add the file `}<inlineCode parentName="p">{`invoices/index.js`}</inlineCode>{`, then that new index route will render at the path `}<inlineCode parentName="p">{`/invoices`}</inlineCode>{` inside of the `}<inlineCode parentName="p">{`invoices.js`}</inlineCode>{` component.`}</p>
      <pre parentName="article"><code parentName="pre" {...{}}>{`├── invoices
│   ├── $id.js
│   └── index.js
└── invoices.js
`}</code></pre>
      <p parentName="article">{`The component tree would be:`}</p>
      <pre parentName="article" {...{
        "className": "language-jsx"
      }}><code parentName="pre" {...{
          "className": "language-jsx"
        }}><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`<`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`App`}</span></span><span parentName="span" {...{
              "className": "token punctuation"
            }}>{`>`}</span></span><span parentName="code" {...{
            "className": "token plain-text"
          }}>{`
  `}</span><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`<`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`Invoices`}</span></span><span parentName="span" {...{
              "className": "token punctuation"
            }}>{`>`}</span></span><span parentName="code" {...{
            "className": "token plain-text"
          }}>{`
    `}</span><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`<`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`InvoicesIndex`}</span></span>{` `}<span parentName="span" {...{
              "className": "token punctuation"
            }}>{`/>`}</span></span><span parentName="code" {...{
            "className": "token plain-text"
          }}>{`
  `}</span><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`</`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`Invoices`}</span></span><span parentName="span" {...{
              "className": "token punctuation"
            }}>{`>`}</span></span><span parentName="code" {...{
            "className": "token plain-text"
          }}>{`
`}</span><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`</`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`App`}</span></span><span parentName="span" {...{
              "className": "token punctuation"
            }}>{`>`}</span></span>{`
`}</code></pre>
      <h2 parentName="article" {...{
        "id": "nested-urls-without-nesting-layouts"
      }}>{`Nested URLs without nesting layouts`}</h2>
      <p parentName="article">{`If you want to add slashes to the URL, but not create a layout hierarchy, use `}<inlineCode parentName="p">{`.`}</inlineCode>{` in the file name instead of putting the file into folders. For example, if you wanted the URL `}<inlineCode parentName="p">{`/invoices/new`}</inlineCode>{` but didn't want it to be wrapped in the `}<inlineCode parentName="p">{`routes/invoices.js`}</inlineCode>{` layout, don't put it in the `}<inlineCode parentName="p">{`routes/invoices/new.js`}</inlineCode>{`, make a file named `}<inlineCode parentName="p">{`routes/invoices.new.js`}</inlineCode>{`. The `}<inlineCode parentName="p">{`.`}</inlineCode>{` will be changed to a `}<inlineCode parentName="p">{`/`}</inlineCode>{` in the url.`}</p>
      <p parentName="article">{`If we created the file `}<inlineCode parentName="p">{`routes/invoices.new.js`}</inlineCode>{` the component tree looks like this:`}</p>
      <pre parentName="article" {...{
        "className": "language-jsx"
      }}><code parentName="pre" {...{
          "className": "language-jsx"
        }}><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`<`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`App`}</span></span><span parentName="span" {...{
              "className": "token punctuation"
            }}>{`>`}</span></span><span parentName="code" {...{
            "className": "token plain-text"
          }}>{`
  `}</span><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`<`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`InvoicesNew`}</span></span>{` `}<span parentName="span" {...{
              "className": "token punctuation"
            }}>{`/>`}</span></span><span parentName="code" {...{
            "className": "token plain-text"
          }}>{`
`}</span><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`</`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`App`}</span></span><span parentName="span" {...{
              "className": "token punctuation"
            }}>{`>`}</span></span>{`
`}</code></pre>
      <p parentName="article">{`If we created the file `}<inlineCode parentName="p">{`routes/invoices/new.js`}</inlineCode>{`, the component tree looks like this:`}</p>
      <pre parentName="article" {...{
        "className": "language-jsx"
      }}><code parentName="pre" {...{
          "className": "language-jsx"
        }}><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`<`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`App`}</span></span><span parentName="span" {...{
              "className": "token punctuation"
            }}>{`>`}</span></span><span parentName="code" {...{
            "className": "token plain-text"
          }}>{`
  `}</span><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`<`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`Invoices`}</span></span><span parentName="span" {...{
              "className": "token punctuation"
            }}>{`>`}</span></span><span parentName="code" {...{
            "className": "token plain-text"
          }}>{`
    `}</span><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`<`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`New`}</span></span>{` `}<span parentName="span" {...{
              "className": "token punctuation"
            }}>{`/>`}</span></span><span parentName="code" {...{
            "className": "token plain-text"
          }}>{`
  `}</span><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`</`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`Invoices`}</span></span><span parentName="span" {...{
              "className": "token punctuation"
            }}>{`>`}</span></span><span parentName="code" {...{
            "className": "token plain-text"
          }}>{`
`}</span><span parentName="code" {...{
            "className": "token tag"
          }}><span parentName="span" {...{
              "className": "token tag"
            }}><span parentName="span" {...{
                "className": "token punctuation"
              }}>{`</`}</span><span parentName="span" {...{
                "className": "token class-name"
              }}>{`App`}</span></span><span parentName="span" {...{
              "className": "token punctuation"
            }}>{`>`}</span></span>{`
`}</code></pre>
      <p parentName="article">{`Nested files = nested urls + nested layouts.`}</p>
      <p parentName="article">{`Flat files = nested urls + no layouts.`}</p>
      <p parentName="article">{`You can introduce nesting or non-nesting at any level of your routes, like `}<inlineCode parentName="p">{`routes/invoices/$id.edit.js`}</inlineCode>{`, which matches the URL `}<inlineCode parentName="p">{`/invoices/123/edit`}</inlineCode>{` but does not create nesting inside of `}<inlineCode parentName="p">{`$id.js`}</inlineCode>{`.`}</p>
      <h2 parentName="article" {...{
        "id": "review"
      }}>{`Review`}</h2>
      <p parentName="article">{`Assuming the following `}<inlineCode parentName="p">{`routes/`}</inlineCode>{` directory:`}</p>
      <pre parentName="article"><code parentName="pre" {...{}}>{`├── 404.js
├── contact.js
├── invoices
│   ├── $id.edit.js
│   ├── $id.js
│   └── late.js
├── invoices.js
└── invoices.new.js
`}</code></pre>
      <p parentName="article">{`Let's look at a few URLs and what the component tree looks like.`}</p>
      <table parentName="article">
        <thead parentName="table">
          <tr parentName="thead">
            <th parentName="tr" {...{
              "align": null
            }}>{`URL`}</th>
            <th parentName="tr" {...{
              "align": null
            }}>{`Component Heirarchy`}</th>
          </tr>
        </thead>
        <tbody parentName="table">
          <tr parentName="tbody">
            <td parentName="tr" {...{
              "align": null
            }}>{`/`}</td>
            <td parentName="tr" {...{
              "align": null
            }}><inlineCode parentName="td">{`root.tsx > routes/index.tsx`}</inlineCode></td>
          </tr>
          <tr parentName="tbody">
            <td parentName="tr" {...{
              "align": null
            }}>{`/invoices`}</td>
            <td parentName="tr" {...{
              "align": null
            }}><inlineCode parentName="td">{`root.tsx > routes/invoices.tsx > routes/invoices/index.tsx`}</inlineCode></td>
          </tr>
          <tr parentName="tbody">
            <td parentName="tr" {...{
              "align": null
            }}>{`/invoices/late`}</td>
            <td parentName="tr" {...{
              "align": null
            }}><inlineCode parentName="td">{`root.tsx > routes/invoices.tsx > routes/invoices/late.tsx`}</inlineCode></td>
          </tr>
          <tr parentName="tbody">
            <td parentName="tr" {...{
              "align": null
            }}>{`/invoices/123`}</td>
            <td parentName="tr" {...{
              "align": null
            }}><inlineCode parentName="td">{`root.tsx > routes/invoices.tsx > routes/invoices/$id.tsx`}</inlineCode></td>
          </tr>
          <tr parentName="tbody">
            <td parentName="tr" {...{
              "align": null
            }}>{`/invoices/123/edit`}</td>
            <td parentName="tr" {...{
              "align": null
            }}><inlineCode parentName="td">{`root.tsx > routes/invoices.tsx > routes/invoices/$id.edit.tsx`}</inlineCode></td>
          </tr>
          <tr parentName="tbody">
            <td parentName="tr" {...{
              "align": null
            }}>{`/invoices/no/match`}</td>
            <td parentName="tr" {...{
              "align": null
            }}><inlineCode parentName="td">{`root.tsx > routes/404.tsx`}</inlineCode></td>
          </tr>
          <tr parentName="tbody">
            <td parentName="tr" {...{
              "align": null
            }}>{`/invoices/new`}</td>
            <td parentName="tr" {...{
              "align": null
            }}><inlineCode parentName="td">{`root.tsx > routes/invoices.new.tsx`}</inlineCode></td>
          </tr>
          <tr parentName="tbody">
            <td parentName="tr" {...{
              "align": null
            }}>{`/contact`}</td>
            <td parentName="tr" {...{
              "align": null
            }}><inlineCode parentName="td">{`root.tsx > routes/contact.tsx`}</inlineCode></td>
          </tr>
        </tbody>
      </table>
      <p parentName="article">{`Nested files are nested layouts. Flat files are flat layouts.`}</p></article>
    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;