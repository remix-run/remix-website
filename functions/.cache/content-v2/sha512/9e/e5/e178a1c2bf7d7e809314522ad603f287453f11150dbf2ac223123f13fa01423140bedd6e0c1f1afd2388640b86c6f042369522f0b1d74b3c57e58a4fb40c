
import { mdx } from "@mdx-js/react";
export function meta() { return {"title":"React Router v6 | Remix"}}
/* @jsxRuntime classic */
/* @jsx mdx */



const layoutProps = {
  
};
const MDXLayout = "wrapper"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType="MDXLayout">
    <nav {...{
      "className": "toc"
    }}><div parentName="nav" {...{
        "className": "heading"
      }}>{`On this page`}</div><ol parentName="nav" {...{
        "className": "toc-level toc-level-1"
      }}><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#docs"
          }}>{`Docs`}</a></li></ol></nav><article {...{
      "className": "prose dark:prose-dark xl:prose-lg p-8 md:max-w-4xl"
    }}><h1 parentName="article" {...{
        "id": "react-router-v6"
      }}>{`React Router v6`}</h1>
      <p parentName="article">{`Remix uses React Router v6, which is not yet released (we wanted to make sure it was good enough for Remix first, it's a big change!).`}</p>
      <p parentName="article">{`In general you work with Links, useLocation, and useParams, but there's more to the API that you can use in Remix. Some of the APIs in Remix will also be moving into React Router (like useLocationPending).`}</p>
      <h2 parentName="article" {...{
        "id": "docs"
      }}>{`Docs`}</h2>
      <p parentName="article"><a parentName="p" {...{
          "href": "https://github.com/ReactTraining/react-router/tree/dev/docs"
        }}>{`This is the best documentation we've got right now`}</a>{`, but we'll be getting v6 out the door when the dust settles on the Remix Supporter Preview launch.`}</p></article>
    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;