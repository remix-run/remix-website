
import { mdx } from "@mdx-js/react";
export function meta() { return {"title":"Styling | Remix Tutorial"}}
/* @jsxRuntime classic */
/* @jsx mdx */
import { Link } from "react-router-dom";


const layoutProps = {
  
};
const MDXLayout = "wrapper"
export default function MDXContent({
  components,
  ...props
}) {
  return <MDXLayout {...layoutProps} {...props} components={components} mdxType="MDXLayout">

    <nav {...{
      "className": "toc"
    }}><div parentName="nav" {...{
        "className": "heading"
      }}>{`On this page`}</div><ol parentName="nav" {...{
        "className": "toc-level toc-level-1"
      }}><li parentName="ol" {...{
          "className": "toc-item toc-item-h2"
        }}><a parentName="li" {...{
            "className": "toc-link toc-link-h2",
            "href": "#adding-styles-to-our-gists-routes"
          }}>{`Adding styles to our gists routes`}</a></li></ol></nav><article {...{
      "className": "prose dark:prose-dark xl:prose-lg p-8 md:max-w-4xl"
    }}><h1 parentName="article" {...{
        "id": "styling"
      }}>{`Styling`}</h1>
      <p parentName="article">{`Two of the hardest parts of CSS have always been:`}</p>
      <ul parentName="article">
        <li parentName="ul">{`writing styles that don't apply to unintended elements and`}</li>
        <li parentName="ul">{`knowing which styles you need for a page.`}</li>
      </ul>
      <p parentName="article">{`Using the route module `}<inlineCode parentName="p">{`links`}</inlineCode>{` API, we can solve these problems easily.`}</p>
      <h2 parentName="article" {...{
        "id": "adding-styles-to-our-gists-routes"
      }}>{`Adding styles to our gists routes`}</h2>
      <p parentName="article">{`Go ahead and add the stylesheets `}<inlineCode parentName="p">{`styles/team.css`}</inlineCode>{` and `}<inlineCode parentName="p">{`styles/team.$member.css`}</inlineCode>{` and add whatever styles you want. The file names aren't important.`}</p>
      <p parentName="article">{`Now open up `}<inlineCode parentName="p">{`routes/team.tsx`}</inlineCode>{` and add this:`}</p>
      <pre parentName="article" {...{
        "className": "language-tsx"
      }}><code parentName="pre" {...{
          "className": "language-tsx"
        }}><span parentName="code" {...{
            "className": "token comment"
          }}>{`// if you want the type`}</span>{`
`}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`import`}</span>{` `}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`type`}</span>{` `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`{`}</span>{` `}<span parentName="code" {...{
            "className": "token maybe-class-name"
          }}>{`LinksFunction`}</span>{` `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`}`}</span>{` `}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`from`}</span>{` `}<span parentName="code" {...{
            "className": "token string"
          }}>{`"@remix-run/react"`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`;`}</span>{`

`}<span parentName="code" {...{
            "className": "token comment"
          }}>{`// import the CSS file with Remix's \`url:\` import assertion`}</span>{`
`}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`import`}</span>{` `}<span parentName="code" {...{
            "className": "token imports"
          }}>{`styles`}</span>{` `}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`from`}</span>{` `}<span parentName="code" {...{
            "className": "token string"
          }}>{`"url:../styles/team.css"`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`;`}</span>{`

`}<span parentName="code" {...{
            "className": "token comment"
          }}>{`// define the \`<link>\`s for this route`}</span>{`
`}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`let`}</span>{` links`}<span parentName="code" {...{
            "className": "token operator"
          }}>{`:`}</span>{` `}<span parentName="code" {...{
            "className": "token function-variable function"
          }}><span parentName="span" {...{
              "className": "token maybe-class-name"
            }}>{`LinksFunction`}</span></span>{` `}<span parentName="code" {...{
            "className": "token operator"
          }}>{`=`}</span>{` `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`(`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`)`}</span>{` `}<span parentName="code" {...{
            "className": "token arrow operator"
          }}>{`=>`}</span>{` `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`{`}</span>{`
  `}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`return`}</span>{` `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`[`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`{`}</span>{` rel`}<span parentName="code" {...{
            "className": "token operator"
          }}>{`:`}</span>{` `}<span parentName="code" {...{
            "className": "token string"
          }}>{`"stylesheet"`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`,`}</span>{` href`}<span parentName="code" {...{
            "className": "token operator"
          }}>{`:`}</span>{` styles `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`}`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`]`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`;`}</span>{`
`}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`}`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`;`}</span>{`
`}</code></pre>
      <p parentName="article">{`With the `}<inlineCode parentName="p">{`url:`}</inlineCode>{` syntax, Remix will emit that asset to your browser build directory and fingerprint the file name for easy caching in production. The `}<inlineCode parentName="p">{`styles`}</inlineCode>{` value is now a url string pointing to the asset.`}</p>
      <p parentName="article">{`The `}<inlineCode parentName="p">{`links`}</inlineCode>{` export tells Remix which `}<inlineCode parentName="p">{`<link>`}</inlineCode>{` tags to add to the document when this page is active (and which to remove when its not). Combining these two features we can add any stylesheets we want when this route is active, and automatically remove them when it's not.`}</p>
      <p parentName="article">{`Now go do the same in `}<inlineCode parentName="p">{`routes/team/$member.tsx`}</inlineCode>{`:`}</p>
      <pre parentName="article" {...{
        "className": "language-tsx"
      }}><code parentName="pre" {...{
          "className": "language-tsx"
        }}><span parentName="code" {...{
            "className": "token keyword"
          }}>{`import`}</span>{` `}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`type`}</span>{` `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`{`}</span>{` `}<span parentName="code" {...{
            "className": "token maybe-class-name"
          }}>{`LinksFunction`}</span>{` `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`}`}</span>{` `}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`from`}</span>{` `}<span parentName="code" {...{
            "className": "token string"
          }}>{`"@remix-run/react"`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`;`}</span>{`

`}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`import`}</span>{` `}<span parentName="code" {...{
            "className": "token imports"
          }}>{`styles`}</span>{` `}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`from`}</span>{` `}<span parentName="code" {...{
            "className": "token string"
          }}>{`"url:../../styles/team.$member.css"`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`;`}</span>{`

`}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`let`}</span>{` links`}<span parentName="code" {...{
            "className": "token operator"
          }}>{`:`}</span>{` `}<span parentName="code" {...{
            "className": "token function-variable function"
          }}><span parentName="span" {...{
              "className": "token maybe-class-name"
            }}>{`LinksFunction`}</span></span>{` `}<span parentName="code" {...{
            "className": "token operator"
          }}>{`=`}</span>{` `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`(`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`)`}</span>{` `}<span parentName="code" {...{
            "className": "token arrow operator"
          }}>{`=>`}</span>{` `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`{`}</span>{`
  `}<span parentName="code" {...{
            "className": "token keyword"
          }}>{`return`}</span>{` `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`[`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`{`}</span>{` rel`}<span parentName="code" {...{
            "className": "token operator"
          }}>{`:`}</span>{` `}<span parentName="code" {...{
            "className": "token string"
          }}>{`"stylesheet"`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`,`}</span>{` href`}<span parentName="code" {...{
            "className": "token operator"
          }}>{`:`}</span>{` styles `}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`}`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`]`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`;`}</span>{`
`}<span parentName="code" {...{
            "className": "token punctuation"
          }}>{`}`}</span><span parentName="code" {...{
            "className": "token punctuation"
          }}>{`;`}</span>{`
`}</code></pre>
      <p parentName="article">{`When you're done, open the dev tools and watch the `}<inlineCode parentName="p">{`<head>`}</inlineCode>{` component as you navigate around. You'll see the styles loading and unloading per route!`}</p>
      <p parentName="article">{`Since we're always using `}<inlineCode parentName="p">{`<link>`}</inlineCode>{` to add styles, we don't have a different code path for your styles in development vs. production like a lot of solutions. Also, your styles also always apply in the same order (order of your nested routes), so your dynamic style loading isn't at risk of different navigation paths like other solutions.`}</p>
      <p parentName="article">{`Remix supports `}<Link to="../../styling" mdxType="Link">{`several different styling options`}</Link>{`, so go ahead and pick your favorite and we'll make sure to load and unload your CSS when the time is right!`}</p>
      <div className="next-prev-links">
  <Link className="next" to="../mutations" mdxType="Link">
    Data Mutations
  </Link>
      </div></article>
    </MDXLayout>;
}

;
MDXContent.isMDXComponent = true;